// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Siterm.EntityFramework;

namespace Siterm.EntityFramework.Migrations
{
    [DbContext(typeof(SitermDbContext))]
    partial class SitermDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "3.1.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            modelBuilder.Entity("Siterm.Domain.Models.Device", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<int?>("ChiefId")
                        .HasColumnType("int");

                    b.Property<int>("DeviceNumber")
                        .HasColumnType("int");

                    b.Property<int>("FacilityId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("ChiefId");

                    b.HasIndex("FacilityId");

                    b.ToTable("Devices");
                });

            modelBuilder.Entity("Siterm.Domain.Models.Facility", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<int>("OrderNr")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Facilities");
                });

            modelBuilder.Entity("Siterm.Domain.Models.Instruction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("AllowedActivities")
                        .HasColumnType("text");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("ForbiddenActivities")
                        .HasColumnType("text");

                    b.Property<int?>("InstructedId")
                        .HasColumnType("int");

                    b.Property<int?>("InstructorId")
                        .HasColumnType("int");

                    b.Property<string>("OldInstructedString")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("InstructedId");

                    b.HasIndex("InstructorId");

                    b.ToTable("Instructions");
                });

            modelBuilder.Entity("Siterm.Domain.Models.ServiceReport", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<DateTime>("CreatedAt")
                        .HasColumnType("datetime");

                    b.Property<int>("DeviceId")
                        .HasColumnType("int");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.Property<int?>("PerformingUserId")
                        .HasColumnType("int");

                    b.Property<int>("Validity")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DeviceId");

                    b.HasIndex("PerformingUserId");

                    b.ToTable("ServiceReports");
                });

            modelBuilder.Entity("Siterm.Domain.Models.ServiceTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("text");

                    b.Property<string>("Description")
                        .HasColumnType("text");

                    b.Property<bool>("IsDone")
                        .HasColumnType("bit");

                    b.Property<int?>("ServiceReportId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("ServiceReportId");

                    b.ToTable("ServiceTask");
                });

            modelBuilder.Entity("Siterm.Domain.Models.Substance", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasColumnType("text");

                    b.Property<string>("Path")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Substances");
                });

            modelBuilder.Entity("Siterm.Domain.Models.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    b.Property<string>("Email")
                        .HasColumnType("text");

                    b.Property<string>("FirstName")
                        .HasColumnType("text");

                    b.Property<string>("LastName")
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Siterm.Domain.Models.Device", b =>
                {
                    b.HasOne("Siterm.Domain.Models.User", "Chief")
                        .WithMany()
                        .HasForeignKey("ChiefId");

                    b.HasOne("Siterm.Domain.Models.Facility", "Facility")
                        .WithMany("Devices")
                        .HasForeignKey("FacilityId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Siterm.Domain.Models.Instruction", b =>
                {
                    b.HasOne("Siterm.Domain.Models.Device", "Device")
                        .WithMany("Instructions")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Siterm.Domain.Models.User", "Instructed")
                        .WithMany("Instructions")
                        .HasForeignKey("InstructedId");

                    b.HasOne("Siterm.Domain.Models.User", "Instructor")
                        .WithMany("PerformedInstructions")
                        .HasForeignKey("InstructorId");
                });

            modelBuilder.Entity("Siterm.Domain.Models.ServiceReport", b =>
                {
                    b.HasOne("Siterm.Domain.Models.Device", "Device")
                        .WithMany("ServiceReports")
                        .HasForeignKey("DeviceId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Siterm.Domain.Models.User", "PerformingUser")
                        .WithMany("ServiceReports")
                        .HasForeignKey("PerformingUserId");
                });

            modelBuilder.Entity("Siterm.Domain.Models.ServiceTask", b =>
                {
                    b.HasOne("Siterm.Domain.Models.ServiceReport", null)
                        .WithMany("ServiceTasks")
                        .HasForeignKey("ServiceReportId");
                });
#pragma warning restore 612, 618
        }
    }
}
